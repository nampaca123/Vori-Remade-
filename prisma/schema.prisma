// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 회의 모델
model Meeting {
  audioId     Int      @id
  meetingId   Int
  transcript  String?
  createdAt   DateTime @default(now())
  groupId     Int

  group       Group    @relation(fields: [groupId], references: [groupId])

  @@index([meetingId])
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  DONE
}

// 티켓 모델
model Ticket {
  ticketId    String       @id @default(uuid())
  title       String
  content     String
  status      TicketStatus @default(TODO)
  meetingId   Int
  assigneeId  Int?         // null 허용 (담당자가 지정되지 않은 경우)
  assignee    User?        @relation(fields: [assigneeId], references: [userId])  // User 모델과 관계 설정
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([assigneeId])
}

// 티켓 상태 변경 이력
model TicketStatusHistory {
  historyId   Int          @id @default(autoincrement())
  ticketId    String       // Ticket 참조
  oldStatus   TicketStatus
  newStatus   TicketStatus
  reason      String       // 상태 변경 이유 (예: "회의 중 완료 보고됨")
  changedAt   DateTime     @default(now())

  @@index([ticketId])
}

// 회의 메트릭스 모델
model MeetingMetrics {
  metricsId           Int      @id @default(autoincrement())
  meetingId           Int      
  actionableItemsCount Int
  statusUpdatesCount   Int
  blockersMentioned    Int
  createdAt           DateTime @default(now())

  @@index([meetingId])
}

model Group {
  groupId   Int           @id @default(autoincrement())
  name      String
  members   GroupMember[]
  meetings  Meeting[]
}

model User {
  userId      Int           @id @default(autoincrement())
  email       String        @unique
  name        String?
  firebaseUid String        @unique
  groups      GroupMember[]
  tickets     Ticket[]      // 담당 티켓 목록 (역방향 관계)
}

model GroupMember {
  userId    Int
  groupId   Int
  role      Role     @default(MEMBER)
  user      User     @relation(fields: [userId], references: [userId])
  group     Group    @relation(fields: [groupId], references: [groupId])

  @@id([userId, groupId])
}

enum Role {
  ADMIN
  MEMBER
}