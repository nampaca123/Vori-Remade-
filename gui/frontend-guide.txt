# VORI Frontend Development Guide

/* Primary Colors */
--vori-primary: #DEB887;     /* 밝은 보리색 메인 */
--vori-primary-light: #F5DEB3; /* 매우 밝은 보리 */
--vori-primary-dark: #B8860B;  /* 포인트용 진한 보리 */

/* Accent Colors */
--vori-accent: #F6E05E;      /* 밝은 노란 보리 */
--vori-accent-dark: #D69E2E; /* 따뜻한 골드 */

/* Background Colors */
--vori-bg-primary: #FFFFFF;  /* 기본 흰색 배경 */
--vori-bg-secondary: #F7FAFC; /* 매우 연한 그레이 배경 */
--vori-bg-tertiary: #EDF2F7;  /* 구분선이나 카드용 배경 */

/* Neutral Colors */
--vori-gray-100: #F7FAFC;
--vori-gray-200: #EDF2F7;
--vori-gray-300: #E2E8F0;
--vori-gray-400: #CBD5E0;
--vori-gray-500: #A0AEC0;
--vori-gray-600: #718096;
--vori-gray-700: #4A5568;
--vori-gray-800: #2D3748;
--vori-gray-900: #1A202C;

/* Status Colors */
--vori-success: #48BB78;     /* 부드러운 초록 */
--vori-warning: #F6AD55;     /* 부드러운 주황 */
--vori-error: #FC8181;       /* 부드러운 빨강 */

## API Documentation

### Authentication
모든 API 엔드포인트는 다음 형식의 Authorization 헤더가 필요:
```
Authorization: Bearer {firebase_id_token}
```
※ 개발 환경에서는 토큰이 없어도 테스트 사용자로 자동 인증됩니다.

### 1. Meeting APIs

#### GET /api/meetings
회의 목록 조회
- Auth: Bearer Token 필요
- Response (200):
```json
[
  {
    "meetingId": "number",
    "audioId": "number",
    "transcript": "string | null",
    "createdAt": "string (ISO date)",
    "groupId": "number"
  }
]
```

#### POST /api/meetings/{id}/stream
오디오 스트림 처리
- Auth: Bearer Token 필요
- Parameters:
  - id: number (path parameter)
- Request Body:
```json
{
  "audioData": "string (base64)",
  "audioId": "number"
}
```
- Response (202):
```json
{
  "message": "Audio processing started",
  "meeting": {
    "meetingId": "number",
    "audioId": "number",
    "transcript": "string | null"
  }
}
```

#### POST /api/meetings/{id}/end
회의 종료
- Auth: Bearer Token 필요
- Parameters:
  - id: number (path parameter)
- Response (200):
```json
{
  "message": "Meeting ended",
  "tickets": [
    {
      "ticketId": "string",
      "title": "string",
      "content": "string",
      "status": "TODO | IN_PROGRESS | DONE",
      "assigneeId": "number | null"
    }
  ]
}
```

#### GET /api/meetings/{id}/tickets
회의별 티켓 조회
- Auth: Bearer Token 필요
- Parameters:
  - id: number (path parameter)
- Response (200):
```json
[
  {
    "ticketId": "string",
    "title": "string",
    "content": "string",
    "status": "TODO | IN_PROGRESS | DONE",
    "assigneeId": "number | null"
  }
]
```

#### POST /api/meetings/{id}/tickets
회의 관련 티켓 생성
- Auth: Bearer Token 필요
- Parameters:
  - id: number (path parameter)
- Request Body:
```json
{
  "title": "string",
  "content": "string",
  "assigneeId": "number | null"
}
```
- Response (201):
```json
{
  "ticketId": "string",
  "title": "string",
  "content": "string",
  "status": "TODO",
  "assigneeId": "number | null"
}
```

#### PATCH /api/meetings/{meetingId}/tickets/{ticketId}
티켓 수정
- Auth: Bearer Token 필요
- Parameters:
  - meetingId: number (path parameter)
  - ticketId: string (path parameter)
- Request Body:
```json
{
  "title": "string",
  "content": "string",
  "status": "TODO | IN_PROGRESS | DONE",
  "assigneeId": "number | null",
  "reason": "string"
}
```
- Response (200):
```json
{
  "ticketId": "string",
  "title": "string",
  "content": "string",
  "status": "TODO | IN_PROGRESS | DONE",
  "assigneeId": "number | null"
}
```

### 2. Group APIs

#### GET /api/groups
그룹 목록 조회
- Auth: Bearer Token 필요
- Response (200):
```json
[
  {
    "groupId": "number",
    "name": "string",
    "members": [
      {
        "userId": "number",
        "email": "string",
        "name": "string"
      }
    ]
  }
]
```

#### POST /api/groups
새 그룹 생성
- Auth: Bearer Token 필요
- Request Body:
```json
{
  "name": "string"
}
```
- Response (201):
```json
{
  "groupId": "number",
  "name": "string"
}
```

#### POST /api/groups/{groupId}/members
그룹 멤버 초대 (ADMIN 권한 필요)
- Auth: Bearer Token 필요
- Parameters:
  - groupId: number (path parameter)
- Request Body:
```json
{
  "email": "string"
}
```
- Response (201):
```json
{
  "message": "Member invited successfully"
}
```

#### PATCH /api/groups/{groupId}/members/{userId}
멤버 역할 수정 (ADMIN 권한 필요)
- Auth: Bearer Token 필요
- Parameters:
  - groupId: number (path parameter)
  - userId: number (path parameter)
- Request Body:
```json
{
  "role": "ADMIN | MEMBER"
}
```
- Response (200):
```json
{
  "message": "Member role updated"
}
```

### 3. User APIs

#### POST /api/users/sync
Firebase 인증 후 사용자 정보 동기화
- Auth: Bearer Token 필요
- Request Body:
```json
{
  "email": "string",
  "name": "string",
  "firebaseUid": "string"
}
```
- Response (201):
```json
{
  "userId": "number",
  "email": "string",
  "name": "string",
  "firebaseUid": "string"
}
```

#### GET /api/users/me
현재 사용자 정보 조회
- Auth: Bearer Token 필요
- Response (200):
```json
{
  "userId": "number",
  "email": "string",
  "name": "string"
}
```

## Frontend Development Guide

### 기술 스택
- **Next.js**: React 기반의 프레임워크
- **Tailwind CSS**: 스타일링
- **Firebase**: 인증 및 배포
- **React DnD**: 칸반보드 드래그 앤 드롭
- **WebSocket**: 실시간 음성 스트리밍 및 티켓 업데이트

### 주요 화면 구성

#### 1. 로그인 화면 (`/login`)
- Firebase Authentication 통합
  - Google 로그인
  - Microsoft/Outlook 로그인
- 반응형 디자인 (모바일 지원)
- 로그인 상태 유지

#### 2. 회의 목록 화면 (`/meetings`)
- 회의 목록 표시
  - 날짜별 정렬
  - 상태별 필터링
  - 검색 및 필터링
  - 무한 스크롤 구현

#### 3. 칸반보드 화면 (`/board/:meetingId`)
- 회의 컨트롤
  - 음성 녹음 시작/중지
  - 실시간 트랜스크립트 표시
  - 회의 종료 버튼
- 칸반보드
  - 상태별 컬럼 (TODO, IN_PROGRESS, DONE)
  - 드래그 앤 드롭으로 상태 변경
  - 티켓 CRUD 기능
  - 실시간 업데이트
- 통계 및 인사이트
  - 회의 진행 시간
  - 생성된 티켓 수
  - 상태 변경 이력

### 개발 환경 설정

```bash
# 프로젝트 생성
npx create-next-app@latest vori-frontend --typescript --tailwind --eslint

# 필요한 패키지 설치
npm install firebase react-dnd react-dnd-html5-backend socket.io-client
```

### 주요 기능 구현

1. **실시간 음성 스트리밍**
   - WebSocket을 통한 오디오 데이터 전송
   - 음성 녹음 및 인코딩
   - 실시간 트랜스크립트 표시

2. **자동화된 인사이트**
   - 실시간 피드백 제공
   - 팀 성과 지표 자동 생성
   - 개선 포인트 자동 감지

3. **확장성**
   - 새로운 분석 지표 쉽게 추가 가능
   - 다양한 데이터 소스 통합 용이
   - 실시간/배치 처리 유연한 전환